from datetime import datetime

import sqlalchemy
from sqlalchemy.orm import sessionmaker, mapper
from sqlalchemy import (
    Table,
    Column,
    MetaData,
    Float,
    DateTime,
)


class PredictionLog:
    def __init__(self, score, true_label, date):
        self.score = score
        self.true_label = true_label
        self.date = date

    def __repr__(self):
        return "<PredictionLog('{}', '{}', '{}')>".format(
            self.score,
            self.true_label,
            self.date,
        )


class DBLog:
    def __init__(self, db_path):
        self.engine = sqlalchemy.create_engine(f'sqlite:///{db_path}')
        metadata = MetaData()
        table = Table(
            'prediction_log',
            metadata,
            Column('score', Float),
            Column('true_label', Float),
            Column('date', DateTime, primary_key=True),
        )
        mapper(PredictionLog, table)
        metadata.create_all(self.engine)
        self.session = sessionmaker(bind=self.engine)()

    def get_full_log(self):
        log = self.session.query(PredictionLog).all()
        self.session.commit()
        return log

    def insert(self, score, true_label):
        pred_log = PredictionLog(
            score=score,
            true_label=true_label,
            date=datetime.now(),
        )
        self.session.add(pred_log)
        self.session.commit()

    def drop_table(self):
        self.session.query(PredictionLog).delete()
        self.session.commit()

    def close(self):
        self.session.close()
