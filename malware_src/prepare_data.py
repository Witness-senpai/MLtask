from catboost import Pool
import pandas as pd

dtypes = {
    'EngineVersion':                                     'category',
    'AppVersion':                                        'category',
    'AvSigVersion':                                      'category',
    'RtpStateBitfield':                                  'category',
    'DefaultBrowsersIdentifier':                         'category',
    'AVProductStatesIdentifier':                         'category',
    'AVProductsInstalled':                               'category',
    'AVProductsEnabled':                                 'category',
    'CountryIdentifier':                                 'category',
    'CityIdentifier':                                    'category',
    'OrganizationIdentifier':                            'category',
    'GeoNameIdentifier':                                 'category',
    'LocaleEnglishNameIdentifier':                       'category',
    'Platform':                                          'category',
    'Processor':                                         'category',
    'OsVer':                                             'category',
    'OsBuild':                                           'category',
    'OsSuite':                                           'category',
    'OsPlatformSubRelease':                              'category',
    'OsBuildLab':                                        'category',
    'SkuEdition':                                        'category',
    'IsProtected':                                       'category',
    'IeVerIdentifier':                                   'category',
    'SmartScreen':                                       'category',
    'Firewall':                                          'category',
    'Census_MDC2FormFactor':                             'category',
    'Census_OEMNameIdentifier':                          'category',
    'Census_OEMModelIdentifier':                         'category',
    'Census_ProcessorManufacturerIdentifier':            'category',
    'Census_ProcessorModelIdentifier':                   'category',
    'Census_ProcessorClass':                             'category',
    'Census_PrimaryDiskTypeName':                        'category',
    'Census_HasOpticalDiskDrive':                        'category',
    'Census_ChassisTypeName':                            'category',
    'Census_PowerPlatformRoleName':                      'category',
    'Census_InternalBatteryType':                        'category',
    'Census_OSVersion':                                  'category',
    'Census_OSArchitecture':                             'category',
    'Census_OSBranch':                                   'category',
    'Census_OSBuildNumber':                              'category',
    'Census_OSBuildRevision':                            'category',
    'Census_OSEdition':                                  'category',
    'Census_OSSkuName':                                  'category',
    'Census_OSInstallTypeName':                          'category',
    'Census_OSInstallLanguageIdentifier':                'category',
    'Census_OSUILocaleIdentifier':                       'category',
    'Census_OSWUAutoUpdateOptionsName':                  'category',
    'Census_GenuineStateName':                           'category',
    'Census_ActivationChannel':                          'category',
    'Census_FlightRing':                                 'category',
    'Census_FirmwareManufacturerIdentifier':             'category',
    'Census_FirmwareVersionIdentifier':                  'category',
    'Census_IsSecureBootEnabled':                        'category',
    'Census_IsTouchEnabled':                             'category',
    'Census_IsPenCapable':                               'category',
    'Census_IsAlwaysOnAlwaysConnectedCapable':           'category',
    'Wdft_IsGamer':                                      'category',
    'Wdft_RegionIdentifier':                             'category',
    'HasDetections':                                     'category',
    'Census_ProcessorCoreCount':                         'float16',
    'Census_PrimaryDiskTotalCapacity':                   'float64',
    'Census_SystemVolumeTotalCapacity':                  'float64',
    'Census_TotalPhysicalRAM':                           'float32',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float32',
    'Census_InternalPrimaryDisplayResolutionHorizontal': 'float32',
    'Census_InternalPrimaryDisplayResolutionVertical':   'float32',
    'Census_InternalBatteryNumberOfCharges':             'float64'
}

TARGET_COLUMN = 'HasDetections'

categorical_cols = [el for el in dtypes if dtypes[el] == 'category']
numerical_cols = [el for el in dtypes if dtypes[el] != 'category']

def dataframe_to_pool(df,
               numeric_columns=numerical_cols,
               categorical_columns=categorical_cols,
               target_column=TARGET_COLUMN,
               ):
    columns = numeric_columns + categorical_columns
    target = None
    if target_column in df.columns:
        target = df[target_column]
    df = df[columns].copy()
    for col in categorical_columns:
        df[col] = df[col].astype('category').apply(lambda x: str(x))
        df[col] = df[col].cat.add_categories(-1)
        df.loc[:, col] = df[col].fillna(-1)
    return Pool(
            df,
            label=target,
            cat_features=categorical_columns,
        )


def json_to_pool(json_data,
            numeric_columns=numerical_cols,
            categorical_columns=categorical_cols,
            target_column=TARGET_COLUMN
            ):
    # Если работаем с json-строкой, то таргет колонка вернёт просто число.
    # Если работаем со словарём json с больше чем 1 строкой, то таргет будет типа dict.
    # Далее, в аргументах DataFrame явно указываем нулевой индекс, если была json-строка.
    isdict = isinstance(json_data.get(TARGET_COLUMN), dict)
    df = pd.DataFrame(json_data, index=None if isdict else [0])
    return dataframe_to_pool(df,
                        numeric_columns,
                        categorical_columns,
                        target_column)
